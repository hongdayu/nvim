-- You can also add or configure plugins by creating files in this `plugins/` folder
-- PLEASE REMOVE THE EXAMPLES YOU HAVE NO INTEREST IN BEFORE ENABLING THIS FILE
-- Here are some examples:

---@type LazySpec
return {
  {
    "folke/snacks.nvim",
    opts = {
      dashboard = {
        preset = {
          header = table.concat({
            "                                                     ",
            "  ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗ ",
            "  ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║ ",
            "  ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║ ",
            "  ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║ ",
            "  ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║ ",
            "  ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝ ",
            "                                                     ",
            "    Hi, HongDaYu " .. os.date(),
            "                                                     ",
            "                                                     ",
            "                                                     ",
          }, "\n"),
        },
      },
    },
  },
  {
    "AstroNvim/astroui",
    ---@type AstroUIOpts
    opts = {
      colorscheme = "onedark",
      icons = {
        ActiveLSP = "",
        ActiveTS = "",
        ArrowLeft = "",
        ArrowRight = "",
        BufferClose = "󰅖",
        DapBreakpoint = "",
        DapBreakpointCondition = "",
        DapBreakpointRejected = "",
        DapLogPoint = ".>",
        DapStopped = "󰁕",
        DefaultFile = "󰈙",
        Diagnostic = "󰒡",
        DiagnosticError = "",
        DiagnosticHint = "󰌵",
        DiagnosticInfo = "󰋼",
        DiagnosticWarn = "",
        Ellipsis = "…",
        FileModified = "",
        FileReadOnly = "",
        FoldClosed = "",
        FoldOpened = "",
        FoldSeparator = " ",
        FolderClosed = "",
        FolderEmpty = "",
        FolderOpen = "",
        Git = "󰊢",
        GitAdd = "",
        GitBranch = "",
        GitChange = "",
        GitConflict = "",
        GitDelete = "",
        GitIgnored = "◌",
        GitRenamed = "➜",
        GitStaged = "✓",
        GitUnstaged = "✗",
        GitUntracked = "★",
        LSPLoaded = "",
        LSPLoading1 = "",
        LSPLoading2 = "󰀚",
        LSPLoading3 = "",
        MacroRecording = "",
        Paste = "󰅌",
        Search = "",
        Selected = "❯",
        Spellcheck = "󰓆",
        TabClose = "󰅙",
      },
    },
  },
  {
    "echasnovski/mini.icons",
    optional = true,
    opts = {
      lsp = {
        array = { glyph = require("icons").Array },
        boolean = { glyph = require("icons").Boolean },
        key = { glyph = require("icons").Keyword },
        namespace = { glyph = require("icons").Namespace },
        null = { glyph = require("icons").Null },
        number = { glyph = require("icons").Number },
        object = { glyph = require("icons").Object },
        package = { glyph = require("icons").Package },
        string = { glyph = require("icons").String },
        class = { glyph = require("icons").Class },
        color = { glyph = require("icons").Color },
        constant = { glyph = require("icons").Constant },
        constructor = { glyph = require("icons").Constructor },
        enum = { glyph = require("icons").Enum },
        enummember = { glyph = require("icons").EnumMember },
        event = { glyph = require("icons").Event },
        field = { glyph = require("icons").Field },
        file = { glyph = require("icons").File },
        folder = { glyph = require("icons").Folder },
        ["function"] = { glyph = require("icons").Function },
        interface = { glyph = require("icons").Interface },
        keyword = { glyph = require("icons").Keyword },
        method = { glyph = require("icons").Method },
        module = { glyph = require("icons").Module },
        operator = { glyph = require("icons").Operator },
        property = { glyph = require("icons").Property },
        reference = { glyph = require("icons").Reference },
        snippet = { glyph = require("icons").Snippet },
        struct = { glyph = require("icons").Struct },
        text = { glyph = require("icons").Text },
        typeparameter = { glyph = require("icons").TypeParameter },
        unit = { glyph = require("icons").Unit },
        value = { glyph = require("icons").Value },
        variable = { glyph = require("icons").Variable },
      },
    },
  },
  {
    "AstroNvim/astrocore",
    opts = {
      mappings = {
        n = {
          ["<tab>"] = { function() require("astrocore.buffer").nav(vim.v.count1) end, desc = "Next buffer" },
        },
      },
    },
  },
  {
    "olimorris/onedarkpro.nvim",
    priority = 1000, -- Ensure it loads first
  },
}
